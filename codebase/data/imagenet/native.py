import os
from torchvision.datasets import ImageFolder
from typing import Any, Tuple, Optional, Callable
import torchvision.transforms as T
from torch.utils.data import DataLoader

all_classes = \
    ['n02091032', 'n04423845', 'n02422106', 'n04557648', 'n03325584', 'n04467665', 'n01682714', 'n02112137', 'n04125021', 'n02088632', 'n04509417', 'n04330267', 'n03085013', 'n04501370', 'n02028035', 'n04599235', 'n02108915', 'n01644900', 'n02124075', 'n03450230', 'n03777568', 'n03775071', 'n03633091', 'n13054560', 'n11939491', 'n04228054', 'n02978881', 'n07932039', 'n09229709', 'n02280649', 'n02859443', 'n02107908', 'n04235860', 'n03930630', 'n04429376', 'n02088364', 'n03777754', 'n02110958', 'n02134418', 'n03337140', 'n02113624', 'n02095314', 'n03000684', 'n03977966', 'n04033995', 'n07718472', 'n02116738', 'n03372029', 'n07831146', 'n02100236', 'n04442312', 'n07717556', 'n02279972', 'n02840245', 'n02356798', 'n01484850', 'n02107312', 'n02346627', 'n03970156', 'n02100583', 'n02892767', 'n03127747', 'n03297495', 'n07693725', 'n03781244', 'n02326432', 'n02980441', 'n03345487', 'n03876231', 'n01968897', 'n03388043', 'n01667778', 'n02319095', 'n03733131', 'n02490219', 'n03657121', 'n03124170', 'n02807133', 'n03590841', 'n02165105', 'n02086079', 'n04005630', 'n02111129', 'n02480855', 'n07613480', 'n02113023', 'n02092002', 'n04483307', 'n02493509', 'n03598930', 'n02099601', 'n02797295', 'n02879718', 'n02086646', 'n01978287', 'n01698640', 'n04258138', 'n02951358', 'n12267677', 'n03125729', 'n09288635', 'n01496331', 'n01860187', 'n02099267', 'n02128757', 'n03982430', 'n02105641', 'n04579145', 'n02112350', 'n01872401', 'n03110669', 'n01755581', 'n01622779', 'n02877765', 'n01930112', 'n04392985', 'n02100735', 'n02747177', 'n02002724', 'n02100877', 'n03637318', 'n01883070', 'n04562935', 'n02106550', 'n01737021', 'n01773797', 'n03992509', 'n01532829', 'n03769881', 'n03930313', 'n02113978', 'n03404251', 'n03887697', 'n02489166', 'n02804414', 'n02120079', 'n03924679', 'n03617480', 'n03776460', 'n02509815', 'n02672831', 'n13040303', 'n01950731', 'n07697537', 'n02835271', 'n03026506', 'n01689811', 'n04417672', 'n01443537', 'n04399382', 'n02843684', 'n02090622', 'n03791053', 'n01685808', 'n02007558', 'n02776631', 'n06785654', 'n01534433', 'n07716906', 'n07715103', 'n02107574', 'n02281787', 'n03089624', 'n03602883', 'n02018795', 'n02094258', 'n03355925', 'n02037110', 'n04243546', 'n02101006', 'n04532106', 'n07742313', 'n04592741', 'n02417914', 'n02095889', 'n02107142', 'n01980166', 'n02486261', 'n02492035', 'n04328186', 'n03706229', 'n04252077', 'n01742172', 'n02105251', 'n02096294', 'n02105412', 'n02437616', 'n02096177', 'n02794156', 'n02091244', 'n07920052', 'n03271574', 'n03216828', 'n03188531', 'n03017168', 'n04044716', 'n04505470', 'n04604644', 'n04372370', 'n03482405', 'n03929855', 'n04252225', 'n02108000', 'n02268443', 'n11879895', 'n03100240', 'n12985857', 'n01749939', 'n03532672', 'n03467068', 'n03998194', 'n01688243', 'n02123159', 'n03250847', 'n01694178', 'n04389033', 'n02090721', 'n02165456', 'n09256479', 'n03764736', 'n02086910', 'n02256656', 'n07930864', 'n04435653', 'n03717622', 'n03710637', 'n03045698', 'n03895866', 'n04081281', 'n02484975', 'n02415577', 'n02981792', 'n01560419', 'n01592084', 'n07749582', 'n07711569', 'n01695060', 'n02058221', 'n02113712', 'n10148035', 'n03249569', 'n04344873', 'n03944341', 'n04179913', 'n03980874', 'n03792782', 'n03710193', 'n01855672', 'n03666591', 'n02442845', 'n03888257', 'n04037443', 'n02871525', 'n02869837', 'n03793489', 'n01986214', 'n02510455', 'n02130308', 'n04596742', 'n02277742', 'n02229544', 'n04398044', 'n02107683', 'n03825788', 'n02825657', 'n02808304', 'n01882714', 'n06794110', 'n03207941', 'n07753275', 'n02447366', 'n02077923', 'n01751748', 'n02111277', 'n02066245', 'n01775062', 'n02483708', 'n03384352', 'n02097047', 'n04270147', 'n03690938', 'n02097298', 'n03062245', 'n02787622', 'n02804610', 'n04552348', 'n01665541', 'n02917067', 'n03933933', 'n07892512', 'n03240683', 'n03042490', 'n03841143', 'n02091831', 'n03379051', 'n03697007', 'n01687978', 'n07248320', 'n03709823', 'n02988304', 'n02092339', 'n01806567', 'n02841315', 'n03903868', 'n03220513', 'n02699494', 'n01630670', 'n01955084', 'n02177972', 'n02168699', 'n03720891', 'n07583066', 'n01697457', 'n02098413', 'n07734744', 'n04456115', 'n01824575', 'n04254680', 'n02114367', 'n01631663', 'n07836838', 'n03160309', 'n03291819', 'n13133613', 'n04461696', 'n01558993', 'n01833805', 'n03938244', 'n02817516', 'n03394916', 'n02906734', 'n03627232', 'n02965783', 'n13052670', 'n03179701', 'n01632777', 'n03908618', 'n15075141', 'n01498041', 'n04049303', 'n04229816', 'n02971356', 'n02087394', 'n02979186', 'n02791124', 'n04525305', 'n03868242', 'n03187595', 'n02089867', 'n02027492', 'n03534580', 'n02129165', 'n02441942', 'n02992529', 'n02009912', 'n02325366', 'n03127925', 'n03208938', 'n01739381', 'n03742115', 'n03950228', 'n02011460', 'n03920288', 'n04458633', 'n03498962', 'n02667093', 'n03207743', 'n02892201', 'n02950826', 'n03457902', 'n12144580', 'n02607072', 'n01855032', 'n02454379', 'n02444819', 'n02101556', 'n13044778', 'n02795169', 'n01943899', 'n02690373', 'n03584254', 'n01914609', 'n02091134', 'n02606052', 'n03344393', 'n03109150', 'n02097209', 'n02412080', 'n02128925', 'n02823428', 'n01990800', 'n04209133', 'n04606251', 'n02109525', 'n03476991', 'n03942813', 'n03670208', 'n02814533', 'n02093754', 'n03347037', 'n02782093', 'n07860988', 'n03877845', 'n02137549', 'n02098105', 'n03180011', 'n02087046', 'n07871810', 'n01829413', 'n04286575', 'n04447861', 'n02802426', 'n02085620', 'n01756291', 'n04367480', 'n12620546', 'n02111500', 'n04597913', 'n03868863', 'n04485082', 'n03871628', 'n03976657', 'n04371430', 'n02219486', 'n03018349', 'n04239074', 'n02692877', 'n03483316', 'n01774750', 'n02481823', 'n04008634', 'n03763968', 'n04591713', 'n02910353', 'n07753592', 'n03126707', 'n02102318', 'n03692522', 'n02013706', 'n02025239', 'n04265275', 'n02074367', 'n04147183', 'n03272562', 'n04266014', 'n01440764', 'n04141076', 'n03837869', 'n02396427', 'n02138441', 'n02002556', 'n03721384', 'n02088094', 'n02488702', 'n06596364', 'n02088466', 'n04355933', 'n02493793', 'n01580077', 'n02104365', 'n02105855', 'n02808440', 'n03874293', 'n04041544', 'n04336792', 'n04162706', 'n03485794', 'n04493381', 'n03028079', 'n01629819', 'n02099849', 'n02112018', 'n02093991', 'n04380533', 'n04579432', 'n03530642', 'n04553703', 'n04275548', 'n02129604', 'n04090263', 'n03461385', 'n04120489', 'n03445777', 'n04418357', 'n02916936', 'n02169497', 'n01644373', 'n04548362', 'n01784675', 'n07584110', 'n03314780', 'n02108089', 'n04296562', 'n02102973', 'n02939185', 'n03445924', 'n01744401', 'n03393912', 'n02361337', 'n04192698',
        'n02364673', 'n04004767', 'n02655020', 'n04154565', 'n02977058', 'n04131690', 'n02119789', 'n04465501', 'n01776313', 'n04116512', 'n03400231', 'n01817953', 'n06359193', 'n04039381', 'n01664065', 'n02397096', 'n02669723', 'n04208210', 'n02133161', 'n07695742', 'n01728572', 'n03594945', 'n03134739', 'n02096051', 'n02640242', 'n04200800', 'n02110063', 'n03929660', 'n01518878', 'n02641379', 'n02099712', 'n04479046', 'n03804744', 'n01843065', 'n02398521', 'n03888605', 'n01768244', 'n02233338', 'n04065272', 'n04589890', 'n02115913', 'n02088238', 'n02109047', 'n04040759', 'n04523525', 'n04209239', 'n04357314', 'n03661043', 'n01616318', 'n03891251', 'n03063599', 'n02226429', 'n03544143', 'n01537544', 'n07714571', 'n04332243', 'n03935335', 'n02120505', 'n01843383', 'n10565667', 'n02930766', 'n03770679', 'n03223299', 'n12768682', 'n04141975', 'n02117135', 'n03527444', 'n03877472', 'n04476259', 'n03759954', 'n03595614', 'n02317335', 'n03958227', 'n02328150', 'n02536864', 'n03376595', 'n02102040', 'n03124043', 'n03710721', 'n07614500', 'n01773157', 'n02363005', 'n03016953', 'n04443257', 'n02966687', 'n02909870', 'n01491361', 'n02790996', 'n03662601', 'n03599486', 'n02172182', 'n03691459', 'n02494079', 'n01675722', 'n03146219', 'n03814639', 'n01910747', 'n04070727', 'n02110341', 'n04251144', 'n04201297', 'n02487347', 'n02106166', 'n03680355', 'n03840681', 'n03961711', 'n04554684', 'n04238763', 'n02093859', 'n04404412', 'n01753488', 'n01847000', 'n03956157', 'n02834397', 'n04590129', 'n02102177', 'n04259630', 'n03014705', 'n02769748', 'n02974003', 'n04507155', 'n02085936', 'n02281406', 'n02105162', 'n02504458', 'n02174001', 'n02730930', 'n03976467', 'n01984695', 'n03673027', 'n09472597', 'n04285008', 'n02113186', 'n01729977', 'n04560804', 'n03947888', 'n01669191', 'n09332890', 'n02090379', 'n04204347', 'n02865351', 'n03417042', 'n07579787', 'n07615774', 'n01530575', 'n02096585', 'n02101388', 'n03095699', 'n04099969', 'n04366367', 'n07768694', 'n03814906', 'n04310018', 'n02127052', 'n02206856', 'n02112706', 'n03594734', 'n03792972', 'n01819313', 'n03729826', 'n04152593', 'n02895154', 'n02403003', 'n04026417', 'n02106030', 'n01601694', 'n03032252', 'n04486054', 'n02125311', 'n02504013', 'n04613696', 'n02799071', 'n02342885', 'n04376876', 'n03255030', 'n03388549', 'n03196217', 'n03425413', 'n04254777', 'n02437312', 'n04254120', 'n03075370', 'n03902125', 'n04009552', 'n09835506', 'n02123045', 'n03908714', 'n03485407', 'n03733281', 'n04548280', 'n03787032', 'n04311174', 'n02500267', 'n03496892', 'n03884397', 'n02098286', 'n02132136', 'n02108551', 'n01871265', 'n03854065', 'n01774384', 'n07802026', 'n02643566', 'n04133789', 'n03775546', 'n03000247', 'n02526121', 'n04141327', 'n02727426', 'n03481172', 'n03770439', 'n03954731', 'n02167151', 'n01795545', 'n01978455', 'n04127249', 'n03131574', 'n04355338', 'n02259212', 'n02009229', 'n04118776', 'n04023962', 'n03538406', 'n02443114', 'n04067472', 'n03785016', 'n02105056', 'n02676566', 'n03141823', 'n04277352', 'n01877812', 'n03065424', 'n04371774', 'n03443371', 'n02708093', 'n02106382', 'n01796340', 'n04487081', 'n04536866', 'n03201208', 'n02006656', 'n07717410', 'n03866082', 'n03459775', 'n03843555', 'n04346328', 'n04584207', 'n03041632', 'n04347754', 'n02095570', 'n02093647', 'n02488291', 'n02096437', 'n03967562', 'n02492660', 'n02666196', 'n04149813', 'n02408429', 'n03000134', 'n07873807', 'n02097658', 'n01740131', 'n02815834', 'n02321529', 'n02791270', 'n02486410', 'n04350905', 'n02422699', 'n02105505', 'n03724870', 'n03642806', 'n01985128', 'n04462240', 'n02268853', 'n07754684', 'n01818515', 'n09193705', 'n03788195', 'n02110185', 'n03259280', 'n04335435', 'n03630383', 'n03991062', 'n07875152', 'n03218198', 'n04273569', 'n01820546', 'n04482393', 'n01734418', 'n02089973', 'n02102480', 'n02823750', 'n02104029', 'n03658185', 'n03272010', 'n02109961', 'n01983481', 'n07565083', 'n02999410', 'n03478589', 'n01641577', 'n02123597', 'n03584829', 'n09399592', 'n01632458', 'n03788365', 'n01677366', 'n01770393', 'n09468604', 'n07720875', 'n03649909', 'n03786901', 'n07730033', 'n03444034', 'n02786058', 'n03899768', 'n07697313', 'n04019541', 'n02687172', 'n03494278', 'n02094114', 'n04311004', 'n01514859', 'n04317175', 'n03916031', 'n03838899', 'n02860847', 'n07716358', 'n07745940', 'n02236044', 'n03832673', 'n02128385', 'n02097130', 'n01807496', 'n03133878', 'n07747607', 'n02110627', 'n03447447', 'n01531178', 'n03529860', 'n01770081', 'n02106662', 'n02114855', 'n02514041', 'n04550184', 'n02264363', 'n02423022', 'n01693334', 'n04263257', 'n02788148', 'n02457408', 'n01873310', 'n02114548', 'n02483362', 'n02110806', 'n03495258', 'n02992211', 'n02445715', 'n01614925', 'n01729322', 'n02091467', 'n01728920', 'n04409515', 'n07684084', 'n02894605', 'n07714990', 'n03733805', 'n02951585', 'n03676483', 'n04146614', 'n02089078', 'n01981276', 'n02091635', 'n01945685', 'n04264628', 'n03937543', 'n02231487', 'n01704323', 'n03424325', 'n04069434', 'n04525038', 'n13037406', 'n02276258', 'n02963159', 'n02749479', 'n02497673', 'n02410509', 'n04591157', 'n04153751', 'n01797886', 'n02793495', 'n04522168', 'n02395406', 'n07880968', 'n02837789', 'n01514668', 'n01494475', 'n04540053', 'n03743016', 'n03063689', 'n02012849', 'n03873416', 'n02777292', 'n01735189', 'n02883205', 'n02093428', 'n02093256', 'n02113799', 'n03857828', 'n01798484', 'n02966193', 'n03197337', 'n02114712', 'n04136333', 'n02115641', 'n04542943', 'n02927161', 'n01944390', 'n02051845', 'n04517823', 'n03796401', 'n12998815', 'n02948072', 'n04487394', 'n01806143', 'n07753113', 'n04033901', 'n02814860', 'n03874599', 'n03891332', 'n03782006', 'n02108422', 'n04325704', 'n01917289', 'n01828970', 'n03290653', 'n02870880', 'n03995372', 'n04370456', 'n02097474', 'n02017213', 'n02123394', 'n07760859', 'n02389026', 'n03476684', 'n03447721', 'n03794056', 'n03492542', 'n01692333', 'n02111889', 'n02085782', 'n01924916', 'n04326547', 'n03623198', 'n02119022', 'n03047690', 'n02099429', 'n02094433', 'n02701002', 'n03452741', 'n02480495', 'n07590611', 'n04111531', 'n02056570', 'n04204238', 'n03773504', 'n07718747', 'n01608432', 'n02018207', 'n06874185', 'n09428293', 'n04515003', 'n04074963', 'n01582220', 'n09421951', 'n02033041', 'n12057211', 'n03535780', 'n02704792', 'n02443484', 'n04612504', 'n04086273', 'n03761084', 'n09246464', 'n04428191', 'n01667114', 'n03803284', 'n01773549', 'n02134084', 'n04118538', 'n02086240', 'n02071294', 'n04356056', 'n02391049', 'n02190166', 'n03983396', 'n01748264', 'n04532670', 'n02783161', 'n03388183']


all_classes = sorted(all_classes)
class_to_idx = {cls_name: i for i, cls_name in enumerate(all_classes)}


class ImageNet_RorA(ImageFolder):

    def __init__(
        self,
        root: str,
        transform: Optional[Callable] = None,
        clip_preprocess: Optional[Callable] = None,
        target_transform: Optional[Callable] = None,
    ):
        super().__init__(
            root,
            transform=transform,
            target_transform=target_transform,
        )

        self.clip_preprocess = clip_preprocess

    def __getitem__(self, index: int) -> Tuple[Any, Any]:
        """
        Args:
            index (int): Index

        Returns:
            tuple: (sample, target) where target is class_index of the target class.
        """
        path, target = self.imgs[index]
        target = os.path.basename(os.path.dirname(path))
        target = class_to_idx[target]
        sample = self.loader(path)
        if self.transform is not None:
            sample = self.transform(sample)
        if self.target_transform is not None:
            target = self.target_transform(target)

        if self.clip_preprocess is None:
            return sample, target
        else:
            clip_sample = self.clip_preprocess(sample)
            return sample, clip_sample, target


def get_tta_transforms(crop_size, mean, std):
    pipelines = []
    pipelines.append(T.Resize(256))
    pipelines.append(T.CenterCrop(crop_size))
    pipelines.append(T.ToTensor())
    pipelines.append(T.Normalize(mean=mean, std=std))
    return T.Compose(pipelines)


def build_imagenet_ra_loader(root, image_size, mean, std, batch_size, num_workers, dali_gpu, percent, clip_preprocess=None):
    dataset = ImageNet_RorA(
        root=root,
        transform=get_tta_transforms(image_size, mean, std),
        clip_preprocess=clip_preprocess
        # target_transform=lambda x: class_to_idx[x]
    )
    return DataLoader(
        dataset=dataset,
        batch_size=batch_size,
        shuffle=True,
        num_workers=num_workers
    )
